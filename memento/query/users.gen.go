// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Memento/memento/model"
)

func newUser(db *gorm.DB, opts ...gen.DOOption) user {
	_user := user{}

	_user.userDo.UseDB(db, opts...)
	_user.userDo.UseModel(&model.User{})

	tableName := _user.userDo.TableName()
	_user.ALL = field.NewAsterisk(tableName)
	_user.ID = field.NewUint(tableName, "id")
	_user.CreatedAt = field.NewTime(tableName, "created_at")
	_user.UpdatedAt = field.NewTime(tableName, "updated_at")
	_user.DeletedAt = field.NewField(tableName, "deleted_at")
	_user.Username = field.NewString(tableName, "username")
	_user.PasswordHash = field.NewString(tableName, "password_hash")
	_user.PasswordRetry = field.NewInt(tableName, "password_retry")
	_user.LockUntil = field.NewTime(tableName, "lock_until")
	_user.AvatarUrl = field.NewString(tableName, "avatar_url")
	_user.Nickname = field.NewString(tableName, "nickname")
	_user.Bio = field.NewString(tableName, "bio")
	_user.TotalLiked = field.NewInt64(tableName, "total_liked")
	_user.TotalComment = field.NewInt64(tableName, "total_comment")
	_user.TotalPosts = field.NewInt64(tableName, "total_posts")
	_user.TotalFiles = field.NewInt64(tableName, "total_files")
	_user.TotalFollower = field.NewInt64(tableName, "total_follower")
	_user.TotalFollows = field.NewInt64(tableName, "total_follows")
	_user.RegisteredAt = field.NewTime(tableName, "registered_at")
	_user.IsAdmin = field.NewBool(tableName, "is_admin")
	_user.Posts = userHasManyPosts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Posts", "model.Post"),
		Comments: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Posts.Comments", "model.Comment"),
		},
		Tags: struct {
			field.RelationField
			Posts struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Posts.Tags", "model.Tag"),
			Posts: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Posts.Tags.Posts", "model.Post"),
			},
		},
	}

	_user.Files = userHasManyFiles{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Files", "model.File"),
	}

	_user.Comments = userHasManyComments{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Comments", "model.Comment"),
	}

	_user.Follows = userManyToManyFollows{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Follows", "model.User"),
		Posts: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Follows.Posts", "model.Post"),
		},
		Files: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Follows.Files", "model.File"),
		},
		Comments: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Follows.Comments", "model.Comment"),
		},
		Follows: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Follows.Follows", "model.User"),
		},
		Likes: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Follows.Likes", "model.Post"),
		},
		LikedComments: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Follows.LikedComments", "model.Comment"),
		},
	}

	_user.Likes = userManyToManyLikes{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Likes", "model.Post"),
	}

	_user.LikedComments = userManyToManyLikedComments{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("LikedComments", "model.Comment"),
	}

	_user.fillFieldMap()

	return _user
}

type user struct {
	userDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	Username      field.String
	PasswordHash  field.String
	PasswordRetry field.Int
	LockUntil     field.Time
	AvatarUrl     field.String
	Nickname      field.String
	Bio           field.String
	TotalLiked    field.Int64
	TotalComment  field.Int64
	TotalPosts    field.Int64
	TotalFiles    field.Int64
	TotalFollower field.Int64
	TotalFollows  field.Int64
	RegisteredAt  field.Time
	IsAdmin       field.Bool
	Posts         userHasManyPosts

	Files userHasManyFiles

	Comments userHasManyComments

	Follows userManyToManyFollows

	Likes userManyToManyLikes

	LikedComments userManyToManyLikedComments

	fieldMap map[string]field.Expr
}

func (u user) Table(newTableName string) *user {
	u.userDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u user) As(alias string) *user {
	u.userDo.DO = *(u.userDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *user) updateTableName(table string) *user {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.Username = field.NewString(table, "username")
	u.PasswordHash = field.NewString(table, "password_hash")
	u.PasswordRetry = field.NewInt(table, "password_retry")
	u.LockUntil = field.NewTime(table, "lock_until")
	u.AvatarUrl = field.NewString(table, "avatar_url")
	u.Nickname = field.NewString(table, "nickname")
	u.Bio = field.NewString(table, "bio")
	u.TotalLiked = field.NewInt64(table, "total_liked")
	u.TotalComment = field.NewInt64(table, "total_comment")
	u.TotalPosts = field.NewInt64(table, "total_posts")
	u.TotalFiles = field.NewInt64(table, "total_files")
	u.TotalFollower = field.NewInt64(table, "total_follower")
	u.TotalFollows = field.NewInt64(table, "total_follows")
	u.RegisteredAt = field.NewTime(table, "registered_at")
	u.IsAdmin = field.NewBool(table, "is_admin")

	u.fillFieldMap()

	return u
}

func (u *user) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *user) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 25)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["username"] = u.Username
	u.fieldMap["password_hash"] = u.PasswordHash
	u.fieldMap["password_retry"] = u.PasswordRetry
	u.fieldMap["lock_until"] = u.LockUntil
	u.fieldMap["avatar_url"] = u.AvatarUrl
	u.fieldMap["nickname"] = u.Nickname
	u.fieldMap["bio"] = u.Bio
	u.fieldMap["total_liked"] = u.TotalLiked
	u.fieldMap["total_comment"] = u.TotalComment
	u.fieldMap["total_posts"] = u.TotalPosts
	u.fieldMap["total_files"] = u.TotalFiles
	u.fieldMap["total_follower"] = u.TotalFollower
	u.fieldMap["total_follows"] = u.TotalFollows
	u.fieldMap["registered_at"] = u.RegisteredAt
	u.fieldMap["is_admin"] = u.IsAdmin

}

func (u user) clone(db *gorm.DB) user {
	u.userDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u user) replaceDB(db *gorm.DB) user {
	u.userDo.ReplaceDB(db)
	return u
}

type userHasManyPosts struct {
	db *gorm.DB

	field.RelationField

	Comments struct {
		field.RelationField
	}
	Tags struct {
		field.RelationField
		Posts struct {
			field.RelationField
		}
	}
}

func (a userHasManyPosts) Where(conds ...field.Expr) *userHasManyPosts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyPosts) WithContext(ctx context.Context) *userHasManyPosts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyPosts) Session(session *gorm.Session) *userHasManyPosts {
	a.db = a.db.Session(session)
	return &a
}

func (a userHasManyPosts) Model(m *model.User) *userHasManyPostsTx {
	return &userHasManyPostsTx{a.db.Model(m).Association(a.Name())}
}

type userHasManyPostsTx struct{ tx *gorm.Association }

func (a userHasManyPostsTx) Find() (result []*model.Post, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyPostsTx) Append(values ...*model.Post) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyPostsTx) Replace(values ...*model.Post) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyPostsTx) Delete(values ...*model.Post) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyPostsTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyPostsTx) Count() int64 {
	return a.tx.Count()
}

type userHasManyFiles struct {
	db *gorm.DB

	field.RelationField
}

func (a userHasManyFiles) Where(conds ...field.Expr) *userHasManyFiles {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyFiles) WithContext(ctx context.Context) *userHasManyFiles {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyFiles) Session(session *gorm.Session) *userHasManyFiles {
	a.db = a.db.Session(session)
	return &a
}

func (a userHasManyFiles) Model(m *model.User) *userHasManyFilesTx {
	return &userHasManyFilesTx{a.db.Model(m).Association(a.Name())}
}

type userHasManyFilesTx struct{ tx *gorm.Association }

func (a userHasManyFilesTx) Find() (result []*model.File, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyFilesTx) Append(values ...*model.File) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyFilesTx) Replace(values ...*model.File) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyFilesTx) Delete(values ...*model.File) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyFilesTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyFilesTx) Count() int64 {
	return a.tx.Count()
}

type userHasManyComments struct {
	db *gorm.DB

	field.RelationField
}

func (a userHasManyComments) Where(conds ...field.Expr) *userHasManyComments {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyComments) WithContext(ctx context.Context) *userHasManyComments {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyComments) Session(session *gorm.Session) *userHasManyComments {
	a.db = a.db.Session(session)
	return &a
}

func (a userHasManyComments) Model(m *model.User) *userHasManyCommentsTx {
	return &userHasManyCommentsTx{a.db.Model(m).Association(a.Name())}
}

type userHasManyCommentsTx struct{ tx *gorm.Association }

func (a userHasManyCommentsTx) Find() (result []*model.Comment, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyCommentsTx) Append(values ...*model.Comment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyCommentsTx) Replace(values ...*model.Comment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyCommentsTx) Delete(values ...*model.Comment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyCommentsTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyCommentsTx) Count() int64 {
	return a.tx.Count()
}

type userManyToManyFollows struct {
	db *gorm.DB

	field.RelationField

	Posts struct {
		field.RelationField
	}
	Files struct {
		field.RelationField
	}
	Comments struct {
		field.RelationField
	}
	Follows struct {
		field.RelationField
	}
	Likes struct {
		field.RelationField
	}
	LikedComments struct {
		field.RelationField
	}
}

func (a userManyToManyFollows) Where(conds ...field.Expr) *userManyToManyFollows {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userManyToManyFollows) WithContext(ctx context.Context) *userManyToManyFollows {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userManyToManyFollows) Session(session *gorm.Session) *userManyToManyFollows {
	a.db = a.db.Session(session)
	return &a
}

func (a userManyToManyFollows) Model(m *model.User) *userManyToManyFollowsTx {
	return &userManyToManyFollowsTx{a.db.Model(m).Association(a.Name())}
}

type userManyToManyFollowsTx struct{ tx *gorm.Association }

func (a userManyToManyFollowsTx) Find() (result []*model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a userManyToManyFollowsTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userManyToManyFollowsTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userManyToManyFollowsTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userManyToManyFollowsTx) Clear() error {
	return a.tx.Clear()
}

func (a userManyToManyFollowsTx) Count() int64 {
	return a.tx.Count()
}

type userManyToManyLikes struct {
	db *gorm.DB

	field.RelationField
}

func (a userManyToManyLikes) Where(conds ...field.Expr) *userManyToManyLikes {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userManyToManyLikes) WithContext(ctx context.Context) *userManyToManyLikes {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userManyToManyLikes) Session(session *gorm.Session) *userManyToManyLikes {
	a.db = a.db.Session(session)
	return &a
}

func (a userManyToManyLikes) Model(m *model.User) *userManyToManyLikesTx {
	return &userManyToManyLikesTx{a.db.Model(m).Association(a.Name())}
}

type userManyToManyLikesTx struct{ tx *gorm.Association }

func (a userManyToManyLikesTx) Find() (result []*model.Post, err error) {
	return result, a.tx.Find(&result)
}

func (a userManyToManyLikesTx) Append(values ...*model.Post) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userManyToManyLikesTx) Replace(values ...*model.Post) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userManyToManyLikesTx) Delete(values ...*model.Post) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userManyToManyLikesTx) Clear() error {
	return a.tx.Clear()
}

func (a userManyToManyLikesTx) Count() int64 {
	return a.tx.Count()
}

type userManyToManyLikedComments struct {
	db *gorm.DB

	field.RelationField
}

func (a userManyToManyLikedComments) Where(conds ...field.Expr) *userManyToManyLikedComments {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userManyToManyLikedComments) WithContext(ctx context.Context) *userManyToManyLikedComments {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userManyToManyLikedComments) Session(session *gorm.Session) *userManyToManyLikedComments {
	a.db = a.db.Session(session)
	return &a
}

func (a userManyToManyLikedComments) Model(m *model.User) *userManyToManyLikedCommentsTx {
	return &userManyToManyLikedCommentsTx{a.db.Model(m).Association(a.Name())}
}

type userManyToManyLikedCommentsTx struct{ tx *gorm.Association }

func (a userManyToManyLikedCommentsTx) Find() (result []*model.Comment, err error) {
	return result, a.tx.Find(&result)
}

func (a userManyToManyLikedCommentsTx) Append(values ...*model.Comment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userManyToManyLikedCommentsTx) Replace(values ...*model.Comment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userManyToManyLikedCommentsTx) Delete(values ...*model.Comment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userManyToManyLikedCommentsTx) Clear() error {
	return a.tx.Clear()
}

func (a userManyToManyLikedCommentsTx) Count() int64 {
	return a.tx.Count()
}

type userDo struct{ gen.DO }

type IUserDo interface {
	gen.SubQuery
	Debug() IUserDo
	WithContext(ctx context.Context) IUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserDo
	WriteDB() IUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserDo
	Not(conds ...gen.Condition) IUserDo
	Or(conds ...gen.Condition) IUserDo
	Select(conds ...field.Expr) IUserDo
	Where(conds ...gen.Condition) IUserDo
	Order(conds ...field.Expr) IUserDo
	Distinct(cols ...field.Expr) IUserDo
	Omit(cols ...field.Expr) IUserDo
	Join(table schema.Tabler, on ...field.Expr) IUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserDo
	Group(cols ...field.Expr) IUserDo
	Having(conds ...gen.Condition) IUserDo
	Limit(limit int) IUserDo
	Offset(offset int) IUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo
	Unscoped() IUserDo
	Create(values ...*model.User) error
	CreateInBatches(values []*model.User, batchSize int) error
	Save(values ...*model.User) error
	First() (*model.User, error)
	Take() (*model.User, error)
	Last() (*model.User, error)
	Find() ([]*model.User, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.User, err error)
	FindInBatches(result *[]*model.User, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.User) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserDo
	Assign(attrs ...field.AssignExpr) IUserDo
	Joins(fields ...field.RelationField) IUserDo
	Preload(fields ...field.RelationField) IUserDo
	FirstOrInit() (*model.User, error)
	FirstOrCreate() (*model.User, error)
	FindByPage(offset int, limit int) (result []*model.User, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userDo) Debug() IUserDo {
	return u.withDO(u.DO.Debug())
}

func (u userDo) WithContext(ctx context.Context) IUserDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDo) ReadDB() IUserDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDo) WriteDB() IUserDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDo) Session(config *gorm.Session) IUserDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDo) Clauses(conds ...clause.Expression) IUserDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDo) Returning(value interface{}, columns ...string) IUserDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDo) Not(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDo) Or(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDo) Select(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDo) Where(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDo) Order(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDo) Distinct(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDo) Omit(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDo) Join(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDo) Group(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDo) Having(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDo) Limit(limit int) IUserDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDo) Offset(offset int) IUserDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDo) Unscoped() IUserDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDo) Create(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDo) CreateInBatches(values []*model.User, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDo) Save(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDo) First() (*model.User, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Take() (*model.User, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Last() (*model.User, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Find() ([]*model.User, error) {
	result, err := u.DO.Find()
	return result.([]*model.User), err
}

func (u userDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.User, err error) {
	buf := make([]*model.User, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDo) FindInBatches(result *[]*model.User, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDo) Attrs(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDo) Assign(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDo) Joins(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDo) Preload(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDo) FirstOrInit() (*model.User, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FirstOrCreate() (*model.User, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FindByPage(offset int, limit int) (result []*model.User, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDo) Delete(models ...*model.User) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDo) withDO(do gen.Dao) *userDo {
	u.DO = *do.(*gen.DO)
	return u
}
